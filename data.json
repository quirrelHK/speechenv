{"add": "// C program to add two numbers    #include<stdio.h>   int main()    {        int A, B, sum = 0;                 // Ask user to enter the two numbers        printf(\"Enter two numbers A and B : \n\");                // Read two numbers from the user || A = 2, B = 3        scanf(\"%d%d\", &A, &B);                 // Calculate the addition of A and B        // using '+' operator        sum = A + B;                 // Print the sum        printf(\"Sum of A and B is: %d\", sum);                 return 0;    }", "sub": "// C program to add two numbers    #include<stdio.h>         int main()    {        int A, B, sum = 0;              // Ask user to enter the two numbers        printf(\"Enter two numbers A and B : \n\");               // Read two numbers from the user || A = 2, B = 3        scanf(\"%d%d\", &A, &B);                // Calculate the addition of A and B        // using '+' operator        sum = A + B;                 // Print the SUB        printf(\"Sub of A and B is: %d\", sum);                 return 0;    }", "multiply": "// C program to add two numbers    #include<stdio.h>   int main()    {        int A, B, sum = 0;              // Ask user to enter the two numbers        printf(\"Enter two numbers A and B : \n\");               // Read two numbers from the user || A = 2, B = 3        scanf(\"%d%d\", &A, &B);                // Calculate the addition of A and B        // using '+' operator        sum = A + B;                 // Print the mult        printf(\"multiply of A and B is: %d\", sum);                 return 0;    }", "swap": "#include<stdio.h>      int main()       {    int a=10, b=20;   printf(\"Before swap a=%d b=%d\",a,b);   a=a+b;//a=30 (10+20)   b=a-b;//b=10 (30-20)   a=a-b;//a=20 (30-10)   printf(\"nAfter swap a=%d b=%d\",a,b);   return 0;   }   ", "factorial": "#include<stdio.h>        int main()    {     int i,fact=1,number;     printf(\"Enter a number: \");       scanf(\"%d\",&number);        for(i=1;i<=number;i++){            fact=fact*i;      }      printf(\"Factorial of %d is: %d\",number,fact);    return 0;    }   ", "division": "// C program to add two numbers    #include<stdio.h>         int main()    {        int A, B, sum = 0;                 // Ask user to enter the two numbers        printf(\"Enter two numbers A and B : \n\");                 // Read two numbers from the user || A = 2, B = 3        scanf(\"%d%d\", &A, &B);                 // Calculate the addition of A and B        // using '+' operator        sum = A + B;                 // Print the division        printf(\"division of A and B is: %d\", sum);                 return 0;    }", "sort": {"insertion": "// C program for insertion sort        #include <math.h>        #include <stdio.h>                 /* Function to sort an array using insertion sort*/        void insertionSort(int arr[], int n)        {            int i, key, j;            for (i = 1; i < n; i++) {                key = arr[i];                j = i - 1;                         /* Move elements of arr[0..i-1], that are                  greater than key, to one position ahead                  of their current position */                while (j >= 0 && arr[j] > key) {                    arr[j + 1] = arr[j];                    j = j - 1;                }                arr[j + 1] = key;            }        }                 // A utility function to print an array of size n        void printArray(int arr[], int n)        {            int i;            for (i = 0; i < n; i++)                printf(\"%d \", arr[i]);            printf(\"\n\");        }", "selection": "// C program for implementation of selection sort        #include <stdio.h>                 void swap(int *xp, int *yp)        {            int temp = *xp;            *xp = *yp;            *yp = temp;        }                 void selectionSort(int arr[], int n)        {            int i, j, min_idx;                     // One by one move boundary of unsorted subarray            for (i = 0; i < n-1; i++)            {                // Find the minimum element in unsorted array                min_idx = i;                for (j = i+1; j < n; j++)                  if (arr[j] < arr[min_idx])                    min_idx = j;                         // Swap the found minimum element with the first element                swap(&arr[min_idx], &arr[i]);            }        }", "bubble": "// C program for implementation of Bubble sort        #include <stdio.h>                void swap(int *xp, int *yp)        {            int temp = *xp;            *xp = *yp;            *yp = temp;        }                  // A function to implement bubble sort        void bubbleSort(int arr[], int n)        {           int i, j;           for (i = 0; i < n-1; i++)                         // Last i elements are already in place                for (j = 0; j < n-i-1; j++)                    if (arr[j] > arr[j+1])                      swap(&arr[j], &arr[j+1]);        }         /* Function to print an array */        void printArray(int arr[], int size)        {            int i;            for (i=0; i < size; i++)                printf(\"%d \", arr[i]);            printf(\"n\");        }                  // Driver program to test above functions        int main()        {            int arr[] = {64, 34, 25, 12, 22, 11, 90};            int n = sizeof(arr)/sizeof(arr[0]);            bubbleSort(arr, n);            printf(\"Sorted array: \n\");            printArray(arr, n);            return 0;        }", "quick": "#include<stdio.h>        void quicksort(int number[25],int first,int last){           int i, j, pivot, temp;                   if(first<last){              pivot=first;              i=first;              j=last;                      while(i<j){                 while(number[i]<=number[pivot]&&i<last)                    i++;                 while(number[j]>number[pivot])                    j--;                 if(i<j){                    temp=number[i];                    number[i]=number[j];                    number[j]=temp;                 }              }                      temp=number[pivot];              number[pivot]=number[j];              number[j]=temp;              quicksort(number,first,j-1);              quicksort(number,j+1,last);                   }        }                int main(){           int i, count, number[25];                   printf(\"How many elements are u going to enter?: \");           scanf(\"%d\",&count);                   printf(\"Enter %d elements:\", count);           for(i=0;i<count;i++)              scanf(\"%d\",&number[i]);                   quicksort(number,0,count-1);                   printf(\"Order of Sorted elements:\");           for(i=0;i<count;i++)              printf(\" %d\",number[i]);                   return 0;        }"}}